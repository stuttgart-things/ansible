---
version: 3
vars:
  PROJECT:
    sh: echo ${PROJECT}
  BRANCH:
    sh: if [ $(git rev-parse --abbrev-ref HEAD) != "main" ]; then echo $(git rev-parse --abbrev-ref HEAD); else echo main ; fi
  DAGGER_ANSIBLE_MODULE: github.com/stuttgart-things/dagger/ansible
  DAGGER_ANSIBLE_MODULE_VERSION: v0.1.2

# PRECONDITION TO CHECK IF THE VIRTUAL ENVIRONMENT IS ACTIVATED
venv-precondition: &venv
  - sh: |
      pip -V | grep '.venv' >/dev/null 2>&1
    msg: "The pip version output does not contain .venv, Halting. Run task setup-molecule and/or source ansible/.venv/bin/activate"

tasks:
  create-release:
    desc: Create release on github w/ artifact
    cmds:
      - gh release create {{ .COLLECTION }}-{{ .VERSION }} --notes "released artifact for {{ .COLLECTION }}" {{ .PACKAGE }}
    vars:
      VERSION:
        sh: echo {{ .PACKAGE }} | awk -F'-' '{print $NF}' | awk -F'.tar.gz' '{print $1}'
      COLLECTION:
        sh: echo "{{ .PACKAGE }}" | grep -oE '[^/]+-[0-9]+\.[0-9]+\.[0-9]+' | sed 's/-[0-9]\+\.[0-9]\+\.[0-9]\+$//'

# PACKAGE=/tmp/ansible/collections/artifacts/sthings-baseos-25.4.1100.tar.gz task create-release
  build-collection:
    desc: Build ansible collection
    cmds:
      - |
        echo "Enter to be build collection:"
        read COLLECTION;

        rm -rf {{ .WIP_DIR }}/*
        dagger call -m {{ .DAGGER_ANSIBLE_MODULE }}@{{ .DAGGER_ANSIBLE_MODULE_VERSION }} init-collection --src {{ .SOURCE_COLLECTION_PATH }}/${COLLECTION} --progress plain export --path={{ .WIP_DIR }}
        echo "Initialized collection dir in: {{ .WIP_DIR }}/{{ .NAMESPACE }}/${COLLECTION}" && ls -lta {{ .WIP_DIR }}/{{ .NAMESPACE }}/${COLLECTION}

        rm -rf {{ .BUILD_DIR }}/*
        dagger call -m {{ .DAGGER_ANSIBLE_MODULE }}@{{ .DAGGER_ANSIBLE_MODULE_VERSION }} modify-role-includes --src {{ .WIP_DIR }}/{{ .NAMESPACE }}/${COLLECTION} --progress plain export --path {{ .BUILD_DIR }}
        echo "Modified collection in: {{ .BUILD_DIR }}" && ls -lta {{ .BUILD_DIR }}

        rm -rf {{ .OUTPUT_DIR }}/*
        dagger call -m {{ .DAGGER_ANSIBLE_MODULE }}@{{ .DAGGER_ANSIBLE_MODULE_VERSION }} build --src {{ .BUILD_DIR }} --progress plain export --path {{ .OUTPUT_DIR }}
        echo package $(ls {{ .OUTPUT_DIR }}/*tar.gz)

        ansible-galaxy collection install $(ls {{ .OUTPUT_DIR }}/*tar.gz)
    vars:
      NAMESPACE: sthings
      SOURCE_COLLECTION_PATH: ./collections
      COLLECTION_BUILD_DIR: /home/sthings/projects/ansible/ansible/collections
      COLLECTION_TMP_DIR: /tmp/ansible/collections
      WIP_DIR: "{{ .COLLECTION_TMP_DIR }}/wip"
      BUILD_DIR: "{{ .COLLECTION_TMP_DIR }}/build/"
      OUTPUT_DIR: "{{ .COLLECTION_TMP_DIR }}/artifacts/"

  branch:
    desc: Create branch from main
    cmds:
      - git checkout main
      - git branch
      - git pull
      - |
        echo "Enter to be created (remote) branch:"
        read BRANCH_NAME;
        git checkout -b ${BRANCH_NAME}
        git push origin ${BRANCH_NAME}
      - git branch
      - git branch --set-upstream-to=origin/main ${BRANCH_NAME}

  check:
    desc: "Run pre-commit hooks"
    cmds:
      - pre-commit run -a

  run-molecule:
    preconditions: *venv
    cmds:
      - |
        echo "Enter to be tested collection name (baseos|container - sthings. is prefixed):"
        read COLLECTION_NAME;
        molecule test -s sthings.${COLLECTION_NAME}

  setup-molecule:
    preconditions: *venv
    cmds:
      - pip install -U setuptools pip 'molecule'
      - pip install molecule-docker
      - pip install netaddr
      - molecule --version
      - ansible-galaxy collection install community.docker

  setup-venv:
    desc: "Setup python virtual environment"
    cmds:
      - rm -rf ./.venv
      - python3 -m venv ./.venv
      - echo "DON'T FORGET TO RUN - source .venv/bin/activate"

  commit:
    desc: Commit + push code into branch
    deps:
      - check
    cmds:
      - rm -rf dist/
      - git branch --set-upstream-to=origin/{{ .BRANCH }}
      - git pull
      - |
        git add *
        if [[ -n $(git status --porcelain) ]]; then
          echo "ENTER COMMIT MESSAGE"
          read COMMIT_MESSAGE;
          echo "COMMITTING CHANGES"
          git commit --allow-empty -a -m "$(echo ${COMMIT_MESSAGE})"
        else
          echo "NO CHANGES"
        fi
        git push origin -u {{ .BRANCH }}

  pr:
    desc: Create pull request into main
    cmds:
      - task: commit
      - gh pr create -t "{{ .BRANCH }}" -b "{{ .BRANCH }} branch into main"
      - sleep 2s
      # - gh pr checks $(gh pr list | grep "^[^#;]" | awk '{print $1}') --watch
      - gh pr merge $(gh pr list | grep "^[^#;]" | grep '{{ .BRANCH }}' | awk '{print $1}') --auto --rebase --delete-branch
      - git checkout main && git pull
