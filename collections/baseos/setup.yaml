---
playbooks:
  - name: prepare_env
    play: |
      ---
      - hosts: localhost
        become: false
        vars:
          home_dir: "{{ lookup('env','HOME') }}"
          targets_list: "{{ targets.split(';') }}"
          vault_approle_id: "{{ lookup('env', 'VAULT_ROLE_ID') }}"
          vault_approle_secret: "{{ lookup('env', 'VAULT_SECRET_ID') }}"
          vault_url: "{{ lookup('env', 'VAULT_ADDR') }}"
          ssh_key: "{{ lookup('community.hashi_vault.hashi_vault', 'secret=ssh/data/sthings:privateKey validate_certs=false auth_method=approle role_id={{ vault_approle_id }} secret_id={{ vault_approle_secret }} url={{ vault_url }}') }}" # pragma: allowlist secret

        pre_tasks:
          - name: Include vars
            ansible.builtin.include_vars: "{{ path_to_vars_file }}.yaml"

        tasks:
          - name: Create hosts
            ansible.builtin.set_fact:
              target_hosts: "{{ targets_list | join('\n') }}"
            when: inventory_groups is not defined
            ignore_errors: true

          - name: Write vars on inv file
            ansible.builtin.blockinfile:
              path: "{{ inv_path }}"
              block: |
                [all]
                {{ target_hosts }}
            when: inventory_groups is not defined
            ignore_errors: true

          - name: Append lines to the end of the file
            ansible.builtin.blockinfile:
              path: "{{ inv_path }}"
              block: |
                [all:vars]
                ansible_user=sthings
                host_key_checking=false
              insertafter: EOF
            when: inventory_groups is not defined
            ignore_errors: false

          - ansible.builtin.set_fact:
              inventory_file: |
                {% for host_groups in inventory_groups.keys() %}
                {% for group in inventory_groups[host_groups].keys() %}
                [{{ group }}]
                {% for host in inventory_groups[host_groups][group] %}
                {{ host }}
                {% endfor %}
                {% endfor %}
                {% endfor %}
                [all:vars]
                ansible_user=sthings
                host_key_checking=false
            when: inventory_groups is defined

          - ansible.builtin.debug:
              var: inventory_file
            when: inventory_groups is defined

          - ansible.builtin.copy:
              content: "{{ inventory_file }}"
              dest: "{{ inv_path }}"
            when: inventory_groups is defined

          - name: Creating ssh directory
            ansible.builtin.file:
              path: "{{ home_dir }}/.ssh/"
              state: directory

          - name: Creating ssh private key file
            ansible.builtin.copy:
              dest: "{{ home_dir }}/.ssh/id_rsa"
              content: "{{ ssh_key | b64decode }}"
              mode: '0600'

          - name: Show inventory
            ansible.builtin.debug: msg="{{ lookup('file', inv_path) }}"

          - name: Refresh inventory
            ansible.builtin.meta: refresh_inventory

          - name: "Pause for {{ pause_time | default(1) }} minutes for machines to be build"
            ansible.builtin.pause:
              minutes: "{{ pause_time | default(1) }}"
            when: pause_time is defined

          - name: "Wait for SSH (delay: {{ delay_time | default(1) }})"
            ansible.builtin.wait_for:
              host: "{{ item }}"
              port: 22
              delay: "{{ delay_time | default(1) }}"
              timeout: 1200
              sleep: 10
            with_items:
              - "{{ groups['all'] }}"

  - name: setup
    play: |
      ---
      - hosts: "{{ target_host | default('all') }}"
        become: true
        gather_facts: true

        vars:
          manage_filesystem: true
          update_packages: true
          install_requirements: true
          install_motd: true
          reboot_all: false
          username: sthings
          lvm_home_sizing: "15%"
          lvm_root_sizing: "35%"
          lvm_var_sizing: "50%"
          send_to_homerun: false
          python_modules:
            - name: kubernetes

          # HOMERUN
          address: "https://homerun.homerun-dev.sthings-vsphere.labul.sva.de/generic"
          auth_token: "IhrGeheimerToken"
          event_title: "BaseOS Setup executed"
          event_message: "BaseOS Setup executed on {{ ansible_fqdn }}"
          event_severity: "INFO"
          event_author: "{{ ansible_user_id }}"
          event_timestamp: "{{ ansible_date_time.date }}"
          event_system: "ansible"
          event_tags: "ansible,baseos"
          event_assignee_address: "patrick.hermann@sva.de"
          event_assignee_name: "patrick.hermann"
          event_artifacts: "vm: {{ ansible_fqdn }}"
          event_url: unset

          vault_instances:
            - https://vault.tiab.labda.sva.de:8200
            # - https://vault.labul.sva.de:8200
            # - https://vault-vsphere.labul.sva.de:8200
            - https://vault-vsphere.tiab.labda.sva.de:8200

        roles:
          - role: sthings.baseos.manage_filesystem
            when: manage_filesystem|bool

          - role: sthings.baseos.install_requirements
            when: install_requirements|bool

        pre_tasks:
          - name: Include vars
            ansible.builtin.include_vars: "{{ path_to_vars_file }}.yaml"
            when: path_to_vars_file is defined

          - ansible.builtin.reboot:
            when: reboot_all|bool

        tasks:
          - name: Install vault ca certificate to local system from multiple instances
            ansible.builtin.include_role:
              name: sthings.baseos.install_configure_vault
              tasks_from: install-ca-auth
            vars:
              vault_url: "{{ vault_instance }}"
            loop: "{{ vault_instances }}"
            loop_control:
              loop_var: vault_instance
            when: vault_instances is defined

          - name: Send event to homerun if enabled
            block:
              - name: Send event notification to homerun
                ansible.builtin.uri:
                  url: "{{ address }}"
                  method: POST
                  headers:
                    Content-Type: "application/json"
                    X-Auth-Token: "{{ auth_token }}"
                  body: >
                    {
                      "title": "{{ event_title }}",
                      "message": "{{ event_message }}",
                      "severity": "{{ event_severity }}",
                      "author": "{{ event_author }}",
                      "timestamp": "{{ event_timestamp }}",
                      "system": "{{ event_system }}",
                      "tags": "{{ event_tags }}",
                      "assigneeaddress": "{{ event_assignee_address }}",
                      "assigneename": "{{ event_assignee_name }}",
                      "artifacts": "{{ event_artifacts }}",
                      "url": "{{ event_url }}"
                    }
                  body_format: json
                  validate_certs: false
                register: homerun_result_message

              - name: Debug the response from homerun
                debug:
                  var: homerun_result_message
            when: send_to_homerun | bool

  - name: users
    play: |
      ---
      - hosts: "{{ target_host | default('all') }}"
        gather_facts: true
        become: true
        vars_files:
          - "{{ path | default('.') }}/{{ profile | default('users') }}.yaml"
        roles:
          - role: sthings.baseos.create_os_user

  - name: tink
    play: |
      ---
      - name: Wait for target machine to be reachable
        hosts: "{{ target_wait_host | default('localhost') }}"
        gather_facts: no
        vars_files:
          - "{{ path | default('.') }}/{{ profile | default('tink_u25') }}.yaml"

        tasks:
          - name: Wait for SSH port 22 to be open on target
            ansible.builtin.wait_for:
              host: "{{ target_ip }}"
              port: "{{ target_port }}"
              timeout: "{{ target_timeout }}"
              state: started

          - name: Wait until SSH is available
            ansible.builtin.wait_for_connection:
              timeout: "{{ ssh_wait_timeout }}"
              sleep: "{{ ssh_wait_sleep }}"
              delay: "{{ ssh_wait_delay }}"
            delegate_to: "{{ target_ip }}"
            vars:
              ansible_user: "{{ bootstrap_user }}"
              ansible_password: "{{ bootstrap_password }}"
              ansible_ssh_common_args: "{{ bootstrap_ssh_args }}"

      - name: Configure target machine
        hosts: "{{ target_host | default('all') }}"
        become: true
        gather_facts: no
        vars_files:
          - "{{ path | default('.') }}/{{ profile | default('tink_u25') }}.yaml"

        roles:
          - role: "{{ user_role }}"

        pre_tasks:
          - name: Include vars
            ansible.builtin.include_vars: "{{ path_to_vars_file }}.yaml"
            when: path_to_vars_file is defined

        tasks:
          - name: Update all packages
            apt:
              update_cache: yes
              upgrade: "{{ apt_upgrade_type }}"

          - name: Ensure python3-venv is installed
            apt:
              name: "{{ python_venv_package }}"
              state: present

          - name: Create a virtual environment
            command: "python3 -m venv {{ python_venv_path }}"
            args:
              creates: "{{ python_venv_path }}"

          - name: Install required Python modules in venv
            ansible.builtin.pip:
              name: "{{ python_modules }}"
              executable: "{{ python_venv_path }}/bin/pip"

          - name: Set interpreter for later tasks
            set_fact:
              ansible_python_interpreter: "{{ python_venv_path }}/bin/python"

        post_tasks:
          - name: Reboot the machine
            reboot:
              msg: "{{ reboot_message }}"
              pre_reboot_delay: "{{ reboot_pre_delay }}"
              post_reboot_delay: "{{ reboot_post_delay }}"
              reboot_timeout: "{{ reboot_timeout }}"

vars:
  - name: tink_u25
    file: | # pragma: allowlist secret
      ---
      # Connection settings
      target_ip: "{{ target_ip }}"
      target_port: 22
      target_timeout: 300

      # SSH bootstrap settings
      bootstrap_user: tink # pragma: allowlist secret
      bootstrap_password: tink # pragma: allowlist secret
      bootstrap_ssh_args: "-o PreferredAuthentications=password -o PubkeyAuthentication=no -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"

      # OS settings
      ansible_os_family: Debian
      ansible_become_password: tink # pragma: allowlist secret

      # User creation
      users:
        - username: sthings
          name: sthings user
          ssh_key:
            - "{{ lookup('file', ssh_pubkey_file) }}"
          groups: ['sudo']
          uid: 1006
          home: /home/sthings
          profile: |
            alias ll='ls -ahl'
          generate_ssh_key: true
          enable_ssh_tcp_forwarding: true

      user_role: sthings.baseos.create_os_user

      # Package updates
      apt_upgrade_type: dist

      # Python environment
      python_venv_package: python3-venv
      python_venv_path: /opt/k3s-venv
      python_modules:
        - packaging
        - kubernetes
        - openshift

      # Reboot settings
      reboot_message: "Reboot initiated by Ansible after setup"
      reboot_pre_delay: 5
      reboot_post_delay: 10
      reboot_timeout: 300

      # SSH wait settings
      ssh_wait_timeout: 300
      ssh_wait_sleep: 5
      ssh_wait_delay: 10

  - name: users
    file: |
      ---
      users:
        - username: rke
          name: rke user
          groups: ['{{ admin_group }}']
          uid: 1005
          home: /home/rke
          profile: |
            alias ll='ls -ahl'
          generate_ssh_key: true
          enable_ssh_tcp_forwarding: true
